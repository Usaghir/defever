{"ast":null,"code":"var _jsxFileName = \"/Users/umerraja/All Cloud Drives /Google Drive/Study/Study Data/Programming/Repositories/Projects/defever/src/main/frontend/src/components/posts/PostsPage.js\";\nimport React from \"react\";\nimport PostsApi from \"./../../api/PostsApi\";\nimport PostForm from \"./PostForm\";\nimport PostCard from \"./PostCard\";\nimport UserApi from \"../../api/UserApi\";\n\nclass PostsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {},\n      posts: []\n    };\n  }\n\n  async createPost(postData) {\n    if (postData !== undefined) {\n      try {\n        const user = this.state.user;\n        const response = await PostsApi.createPost({\n          body: postData.body,\n          date: new Date().toLocaleString(),\n          likes: [],\n          user\n        });\n        const post = response.data;\n        const newPosts = this.state.posts.concat(post);\n        this.setState({\n          posts: newPosts\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }\n\n  async updatePost(newPostData) {\n    try {\n      await PostsApi.updatePost({\n        id: newPostData.id,\n        body: newPostData.body,\n        date: newPostData.date,\n        likes: newPostData.likes,\n        user: newPostData.user\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async deletePost(post) {\n    try {\n      await PostsApi.deletePost(post.id);\n      const newPosts = this.state.posts.filter(p => p.id !== post.id);\n      this.setState({\n        posts: newPosts\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  componentDidMount() {\n    PostsApi.getAllPosts().then(({\n      data\n    }) => this.setState({\n      posts: data\n    })).catch(err => console.error(err));\n    UserApi.current().then(({\n      data\n    }) => this.setState({\n      user: data\n    })).catch(err => console.error(err));\n  }\n\n  render() {\n    const posts = this.state.posts.sort((post1, post2) => post1.likes <= post2.likes ? 1 : -1);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \" shadow-lg   rounded\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PostForm, {\n      className: \"card m-5\",\n      onSubmit: postData => this.createPost(postData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }), posts.map(post => /*#__PURE__*/React.createElement(PostCard, {\n      className: \"card m-5\",\n      key: post.id,\n      currentUser: this.state.user,\n      post: post,\n      onLikeClick: newPostData => this.updatePost(newPostData),\n      onDeleteClick: () => this.deletePost(post),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default PostsPage;","map":{"version":3,"sources":["/Users/umerraja/All Cloud Drives /Google Drive/Study/Study Data/Programming/Repositories/Projects/defever/src/main/frontend/src/components/posts/PostsPage.js"],"names":["React","PostsApi","PostForm","PostCard","UserApi","PostsPage","Component","constructor","props","state","user","posts","createPost","postData","undefined","response","body","date","Date","toLocaleString","likes","post","data","newPosts","concat","setState","e","console","error","updatePost","newPostData","id","deletePost","filter","p","componentDidMount","getAllPosts","then","catch","err","current","render","sort","post1","post2","map"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PostsApi from \"./../../api/PostsApi\";\nimport PostForm from \"./PostForm\";\nimport PostCard from \"./PostCard\";\nimport UserApi from \"../../api/UserApi\";\n\nclass PostsPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {},\n      posts: [],\n    };\n  }\n\n\n\n  async createPost(postData) {\n    if(postData !== undefined) {\n      try {\n        const user = this.state.user;\n        const response = await PostsApi.createPost({body: postData.body,\n        date: new Date().toLocaleString(), likes: [], user});\n        const post = response.data;\n        const newPosts = this.state.posts.concat(post);\n  \n        this.setState({\n          posts: newPosts,\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }\n\n  async updatePost(newPostData) {\n    try {\n      await PostsApi.updatePost({id: newPostData.id, body: newPostData.body,\n      date: newPostData.date, likes: newPostData.likes, user: newPostData.user});\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async deletePost(post) {\n    try {\n      await PostsApi.deletePost(post.id);\n      const newPosts = this.state.posts.filter((p) => p.id !== post.id);\n      this.setState({\n        posts: newPosts,\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  componentDidMount() {\n    PostsApi.getAllPosts()\n      .then(({ data }) => this.setState({ posts: data }))\n      .catch((err) => console.error(err));\n    UserApi.current()\n      .then(( {data }) => this.setState({ user: data }))\n      .catch((err) => console.error(err));\n  }\n\n  render() {\n    const posts = this.state.posts.sort((post1, post2) =>\n                  (post1.likes <= post2.likes) ? 1 : -1);\n\n\n    return (\n      <div className=\" shadow-lg   rounded\">\n        <PostForm className =\"card m-5\" onSubmit={(postData) => this.createPost(postData)} />\n\n        {posts.map((post) => (\n          <PostCard\n          className =\"card m-5\"\n            key={post.id}\n            currentUser={this.state.user}\n            post={post}\n            onLikeClick={(newPostData) => this.updatePost(newPostData)}\n            onDeleteClick={() => this.deletePost(post)}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default PostsPage;\n"]},"metadata":{},"sourceType":"module"}