{"ast":null,"code":"var _jsxFileName = \"/Users/umerraja/All Cloud Drives /Google Drive/Study/Study Data/Programming/Repositories/Projects/defever/frontend/src/components/chat/Chat.js\";\nimport React, { Component } from 'react';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport './Chat.css';\nimport Online from './Online';\nimport ChatRoom from './ChatRoom';\nimport UserApi from '../../api/UserApi';\nimport ChatApi from '../../api/ChatApi';\nimport { Button, Avatar } from '@material-ui/core';\nimport '../Components.css';\nlet stompClient = null;\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      messageContent: '',\n      messages: [],\n      users: [],\n      chats: [],\n      time: new Date().toLocaleString(),\n      chatCol: ['bg-primary', 'bg-secondary', 'bg-success', 'bg-danger', 'bg-warning', 'bg-info']\n    };\n\n    this.handleMessage = event => {\n      this.setState({\n        messageContent: event.target.value\n      });\n    };\n\n    this.handleChatSubmit = event => {\n      this.send(event);\n      event.preventDefault();\n    };\n\n    this.connect = event => {\n      let socket = new SockJS('http://localhost:8080/ws');\n      stompClient = Stomp.over(socket);\n      stompClient.connect({}, this.onConnected, this.onError);\n    };\n\n    this.onConnected = () => {\n      stompClient.subscribe('/topic/public', this.onMessageReceived);\n      stompClient.send('/app/chat.register', {}, JSON.stringify({\n        sender: this.state.username,\n        type: 'JOIN'\n      }));\n    };\n\n    this.onError = error => {\n      console.log(error);\n    };\n\n    this.send = event => {\n      if (this.state.messageContent && stompClient) {\n        let chatMessage = {\n          sender: this.state.username,\n          content: this.state.messageContent,\n          type: 'CHAT'\n        };\n        stompClient.send('/app/chat.send', {}, JSON.stringify(chatMessage));\n        this.setState({\n          messageContent: ''\n        });\n      }\n\n      event.preventDefault();\n    };\n\n    this.onMessageReceived = payload => {\n      var message = JSON.parse(payload.body);\n      console.log(message.type);\n\n      if (message.type === 'JOIN'\n      /* &&\n      !this.state.messages.includes(message.sender + ' has joined') */\n      ) {\n          this.setState({\n            messages: [...this.state.messages, message.sender + ' has joined']\n          });\n          this.setState({\n            users: [...this.state.users, message.sender]\n          });\n        } else if (message.type === 'CHAT') {\n        this.setState({\n          messages: [...this.state.messages, message.sender + '  : ' + message.content]\n        });\n        this.setState({\n          users: [...this.state.users, message.sender]\n        });\n      } else if (message.type === 'LEAVE') {\n        this.setState({\n          messages: [...this.state.messages, message.sender + ' Left']\n        });\n      }\n\n      console.log(this.state.messages);\n      console.log(this.state.users);\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Online, {\n        onlineUsers: [...new Set(this.state.users)].filter(function (el) {\n          return el != null;\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(ChatRoom, {\n        chatArea: this.state.messages.map((mess, index) => mess.includes('joined') ? /*#__PURE__*/React.createElement(\"li\", {\n          key: index,\n          className: \"shadow-lg p-3 mb-2 text-center bg-white text-success  text-break\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"badge badge-success text-wrap bebas-font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 19\n          }\n        }, mess)) : /*#__PURE__*/React.createElement(\"li\", {\n          key: index,\n          className: \"row justify-content-between shadow-lg p-3 mb-2 bg-white   text-break\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(Avatar, {\n          className: this.state.chatCol[Math.floor(Math.random() * 6)],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(\"h5\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 21\n          }\n        }, mess)), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"badge text-wrap \",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 19\n          }\n        }, this.state.time))),\n        chatSubmit: this.handleChatSubmit,\n        valueChat: this.state.messageContent,\n        chatChange: this.handleMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }\n      })));\n    };\n\n    this.handleMessage = this.handleMessage.bind(this);\n    this.handleChatSubmit = this.handleChatSubmit.bind(this);\n    this.connect = this.connect.bind(this);\n    this.send = this.send.bind(this);\n    this.onConnected = this.onConnected.bind(this);\n    this.onMessageReceived = this.onMessageReceived.bind(this);\n  }\n\n  componentDidMount() {\n    ChatApi.getAllChats().then(({\n      data\n    }) => {\n      data.map((dat, index) => {\n        if (dat.type === 'CHAT') {\n          this.setState({\n            messages: [...this.state.messages, dat.sender + '  : ' + dat.content]\n          });\n          /* this.setState({\n            users: [...this.state.users, dat.sender],\n          }); */\n        }\n      });\n    }).catch(err => console.error(err));\n    UserApi.current().then(({\n      data\n    }) => {\n      this.setState({\n        username: data.name\n      });\n    }).catch(err => console.error(err));\n    this.connect();\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/umerraja/All Cloud Drives /Google Drive/Study/Study Data/Programming/Repositories/Projects/defever/frontend/src/components/chat/Chat.js"],"names":["React","Component","SockJS","Stomp","Online","ChatRoom","UserApi","ChatApi","Button","Avatar","stompClient","Chat","constructor","props","state","username","messageContent","messages","users","chats","time","Date","toLocaleString","chatCol","handleMessage","event","setState","target","value","handleChatSubmit","send","preventDefault","connect","socket","over","onConnected","onError","subscribe","onMessageReceived","JSON","stringify","sender","type","error","console","log","chatMessage","content","payload","message","parse","body","render","Set","filter","el","map","mess","index","includes","Math","floor","random","bind","componentDidMount","getAllChats","then","data","dat","catch","err","current","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport './Chat.css';\nimport Online from './Online';\nimport ChatRoom from './ChatRoom';\nimport UserApi from '../../api/UserApi';\nimport ChatApi from '../../api/ChatApi';\nimport { Button, Avatar } from '@material-ui/core';\nimport '../Components.css';\n\nlet stompClient = null;\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n    this.handleMessage = this.handleMessage.bind(this);\n    this.handleChatSubmit = this.handleChatSubmit.bind(this);\n    this.connect = this.connect.bind(this);\n    this.send = this.send.bind(this);\n    this.onConnected = this.onConnected.bind(this);\n    this.onMessageReceived = this.onMessageReceived.bind(this);\n  }\n\n  state = {\n    username: '',\n    messageContent: '',\n    messages: [],\n    users: [],\n    chats: [],\n    time: new Date().toLocaleString(),\n    chatCol: [\n      'bg-primary',\n      'bg-secondary',\n      'bg-success',\n      'bg-danger',\n      'bg-warning',\n      'bg-info',\n    ],\n  };\n\n  componentDidMount() {\n    ChatApi.getAllChats()\n      .then(({ data }) => {\n        data.map((dat, index) => {\n          if (dat.type === 'CHAT') {\n            this.setState({\n              messages: [\n                ...this.state.messages,\n                dat.sender + '  : ' + dat.content,\n              ],\n            });\n            /* this.setState({\n              users: [...this.state.users, dat.sender],\n            }); */\n          }\n        });\n      })\n      .catch((err) => console.error(err));\n\n    UserApi.current()\n      .then(({ data }) => {\n        this.setState({ username: data.name });\n      })\n      .catch((err) => console.error(err));\n    this.connect();\n  }\n\n  handleMessage = (event) => {\n    this.setState({ messageContent: event.target.value });\n  };\n\n  handleChatSubmit = (event) => {\n    this.send(event);\n    event.preventDefault();\n  };\n\n  connect = (event) => {\n    let socket = new SockJS('http://localhost:8080/ws');\n    stompClient = Stomp.over(socket);\n    stompClient.connect({}, this.onConnected, this.onError);\n  };\n\n  onConnected = () => {\n    stompClient.subscribe('/topic/public', this.onMessageReceived);\n\n    stompClient.send(\n      '/app/chat.register',\n      {},\n      JSON.stringify({ sender: this.state.username, type: 'JOIN' })\n    );\n  };\n  onError = (error) => {\n    console.log(error);\n  };\n\n  send = (event) => {\n    if (this.state.messageContent && stompClient) {\n      let chatMessage = {\n        sender: this.state.username,\n        content: this.state.messageContent,\n        type: 'CHAT',\n      };\n\n      stompClient.send('/app/chat.send', {}, JSON.stringify(chatMessage));\n      this.setState({ messageContent: '' });\n    }\n    event.preventDefault();\n  };\n\n  onMessageReceived = (payload) => {\n    var message = JSON.parse(payload.body);\n    console.log(message.type);\n    if (\n      message.type ===\n      'JOIN' /* &&\n      !this.state.messages.includes(message.sender + ' has joined') */\n    ) {\n      this.setState({\n        messages: [...this.state.messages, message.sender + ' has joined'],\n      });\n      this.setState({\n        users: [...this.state.users, message.sender],\n      });\n    } else if (message.type === 'CHAT') {\n      this.setState({\n        messages: [\n          ...this.state.messages,\n          message.sender + '  : ' + message.content,\n        ],\n      });\n      this.setState({\n        users: [...this.state.users, message.sender],\n      });\n    } else if (message.type === 'LEAVE') {\n      this.setState({\n        messages: [...this.state.messages, message.sender + ' Left'],\n      });\n    }\n    console.log(this.state.messages);\n    console.log(this.state.users);\n  };\n\n  render = () => {\n    return (\n      <div>\n        <div className=\"row\">\n          <Online\n            onlineUsers={[...new Set(this.state.users)].filter(function (el) {\n              return el != null;\n            })}\n          />\n\n          <ChatRoom\n            chatArea={this.state.messages.map((mess, index) =>\n              mess.includes('joined') ? (\n                <li\n                  key={index}\n                  className=\"shadow-lg p-3 mb-2 text-center bg-white text-success  text-break\"\n                >\n                  <div className=\"badge badge-success text-wrap bebas-font\">\n                    {mess}\n                  </div>\n                </li>\n              ) : (\n                <li\n                  key={index}\n                  className=\"row justify-content-between shadow-lg p-3 mb-2 bg-white   text-break\"\n                >\n                  <div>\n                    <Avatar\n                      className={\n                        this.state.chatCol[Math.floor(Math.random() * 6)]\n                      }\n                    ></Avatar>\n                    <h5>{mess}</h5>\n                  </div>\n                  <div className=\"badge text-wrap \">{this.state.time}</div>\n                </li>\n              )\n            )}\n            chatSubmit={this.handleChatSubmit}\n            valueChat={this.state.messageContent}\n            chatChange={this.handleMessage}\n          />\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}