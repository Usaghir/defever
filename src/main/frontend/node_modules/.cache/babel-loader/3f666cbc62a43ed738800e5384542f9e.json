{"ast":null,"code":"var _jsxFileName = \"/Users/umerraja/All Cloud Drives /Google Drive/Study/Study Data/Programming/Repositories/Projects/defever/frontend/src/components/chat/Chat.js\";\nimport React, { Component } from 'react';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport './Chat.css';\nimport Online from './Online';\nimport ChatRoom from './ChatRoom';\nimport UserApi from '../../api/UserApi';\nimport { Button, Avatar } from '@material-ui/core';\nimport ChatApi from '../../api/ChatApi';\nlet stompClient = null;\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMessage = event => {\n      this.setState({\n        messageContent: event.target.value\n      });\n    };\n\n    this.handleChatSubmit = event => {\n      this.setState({\n        messageContent: event.target.value\n      });\n      this.send(event);\n      event.preventDefault();\n    };\n\n    this.connect = event => {\n      let socket = new SockJS('http://localhost:8080/ws');\n      stompClient = Stomp.over(socket);\n      stompClient.connect({}, this.onConnected, this.onError);\n    };\n\n    this.onConnected = () => {\n      stompClient.subscribe('/topic/public', this.onMessageReceived);\n      stompClient.send('/app/chat.register', {}, JSON.stringify({\n        sender: this.state.username,\n        type: 'JOIN'\n      }));\n    };\n\n    this.onError = error => {\n      console.log(error);\n    };\n\n    this.send = event => {\n      if (this.state.messageContent && stompClient) {\n        let chatMessage = {\n          sender: this.state.username,\n          content: this.state.messageContent,\n          type: 'CHAT'\n        };\n        stompClient.send('/app/chat.send', {}, JSON.stringify(chatMessage));\n        this.setState({\n          messageContent: ''\n        });\n      }\n\n      event.preventDefault();\n    };\n\n    this.onMessageReceived = payload => {\n      console.log(this.state.messages);\n      var message = JSON.parse(payload.body);\n      console.log(message);\n\n      if (message.type === 'JOIN') {\n        this.setState({\n          messages: [...this.state.messages, message.sender + ' has joined']\n        });\n        this.setState({\n          users: [...this.state.users, message.sender]\n        });\n      } else if (message.type === 'CHAT') {\n        this.setState({\n          messages: [...this.state.messages, message.sender + '  : ' + message.content]\n        });\n      } else if (message.type === 'LEAVE') {\n        this.setState({\n          messages: [...this.state.messages, message.sender + +' Left']\n        });\n      }\n\n      console.log(this.state.messages);\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Online, {\n        onlineUsers: this.state.users,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(ChatRoom, {\n        chatArea: this.state.messages.map((mess, index) => mess.includes('joined') ? /*#__PURE__*/React.createElement(\"li\", {\n          key: index,\n          className: \"shadow-lg p-3 mb-2 text-center bg-white text-success rounded text-break\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"badge badge-primary text-wrap\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }\n        }, mess)) : /*#__PURE__*/React.createElement(\"li\", {\n          key: index,\n          className: \"row justify-content-between shadow-lg p-3 mb-2 bg-white  rounded text-break\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Avatar, {\n          className: \"bg-primary mr-3\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 19\n          }\n        }, mess[0]), /*#__PURE__*/React.createElement(\"h5\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 19\n          }\n        }, mess)), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"badge text-wrap \",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 17\n          }\n        }, this.state.time))),\n        chatSubmit: this.handleChatSubmit,\n        valueChat: this.state.messageContent,\n        chatChange: this.handleMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    this.handleMessage = this.handleMessage.bind(this);\n    this.handleChatSubmit = this.handleChatSubmit.bind(this);\n    this.connect = this.connect.bind(this);\n    this.send = this.send.bind(this);\n    this.onConnected = this.onConnected.bind(this);\n    this.onMessageReceived = this.onMessageReceived.bind(this);\n    this.state = {\n      username: '',\n      messageContent: '',\n      messages: [],\n      users: [],\n      time: new Date().toLocaleString()\n    };\n  }\n\n  componentDidMount() {\n    ChatApi.getAllChat().then(({\n      data\n    }) => this.setState({\n      messages: data\n    })).catch(err => console.error(err));\n    UserApi.current().then(({\n      data\n    }) => this.setState({\n      username: data.name\n    })).catch(err => console.error(err));\n    console.log(this.state.messages);\n    this.connect();\n    console.log(this.state.messages);\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/umerraja/All Cloud Drives /Google Drive/Study/Study Data/Programming/Repositories/Projects/defever/frontend/src/components/chat/Chat.js"],"names":["React","Component","SockJS","Stomp","Online","ChatRoom","UserApi","Button","Avatar","ChatApi","stompClient","Chat","constructor","props","handleMessage","event","setState","messageContent","target","value","handleChatSubmit","send","preventDefault","connect","socket","over","onConnected","onError","subscribe","onMessageReceived","JSON","stringify","sender","state","username","type","error","console","log","chatMessage","content","payload","messages","message","parse","body","users","render","map","mess","index","includes","time","bind","Date","toLocaleString","componentDidMount","getAllChat","then","data","catch","err","current","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport './Chat.css';\nimport Online from './Online';\nimport ChatRoom from './ChatRoom';\nimport UserApi from '../../api/UserApi';\nimport { Button, Avatar } from '@material-ui/core';\nimport ChatApi from '../../api/ChatApi';\n\nlet stompClient = null;\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n    this.handleMessage = this.handleMessage.bind(this);\n    this.handleChatSubmit = this.handleChatSubmit.bind(this);\n    this.connect = this.connect.bind(this);\n    this.send = this.send.bind(this);\n    this.onConnected = this.onConnected.bind(this);\n    this.onMessageReceived = this.onMessageReceived.bind(this);\n    this.state = {\n      username: '',\n      messageContent: '',\n      messages: [],\n      users: [],\n      time: new Date().toLocaleString(),\n    };\n  }\n\n  componentDidMount() {\n    ChatApi.getAllChat()\n      .then(({ data }) => this.setState({ messages: data }))\n      .catch((err) => console.error(err));\n\n    UserApi.current()\n      .then(({ data }) => this.setState({ username: data.name }))\n      .catch((err) => console.error(err));\n    console.log(this.state.messages);\n    this.connect();\n    console.log(this.state.messages);\n  }\n\n  handleMessage = (event) => {\n    this.setState({ messageContent: event.target.value });\n  };\n\n  handleChatSubmit = (event) => {\n    this.setState({ messageContent: event.target.value });\n    this.send(event);\n    event.preventDefault();\n  };\n\n  connect = (event) => {\n    let socket = new SockJS('http://localhost:8080/ws');\n    stompClient = Stomp.over(socket);\n    stompClient.connect({}, this.onConnected, this.onError);\n  };\n\n  onConnected = () => {\n    stompClient.subscribe('/topic/public', this.onMessageReceived);\n\n    stompClient.send(\n      '/app/chat.register',\n      {},\n      JSON.stringify({ sender: this.state.username, type: 'JOIN' })\n    );\n  };\n  onError = (error) => {\n    console.log(error);\n  };\n\n  send = (event) => {\n    if (this.state.messageContent && stompClient) {\n      let chatMessage = {\n        sender: this.state.username,\n        content: this.state.messageContent,\n        type: 'CHAT',\n      };\n\n      stompClient.send('/app/chat.send', {}, JSON.stringify(chatMessage));\n      this.setState({ messageContent: '' });\n    }\n    event.preventDefault();\n  };\n\n  onMessageReceived = (payload) => {\n    console.log(this.state.messages);\n    var message = JSON.parse(payload.body);\n    console.log(message);\n\n    if (message.type === 'JOIN') {\n      this.setState({\n        messages: [...this.state.messages, message.sender + ' has joined'],\n      });\n\n      this.setState({\n        users: [...this.state.users, message.sender],\n      });\n    } else if (message.type === 'CHAT') {\n      this.setState({\n        messages: [\n          ...this.state.messages,\n          message.sender + '  : ' + message.content,\n        ],\n      });\n    } else if (message.type === 'LEAVE') {\n      this.setState({\n        messages: [...this.state.messages, message.sender + +' Left'],\n      });\n    }\n    console.log(this.state.messages);\n  };\n\n  render = () => {\n    return (\n      <div className=\"row\">\n        <Online onlineUsers={this.state.users} />\n        <ChatRoom\n          chatArea={this.state.messages.map((mess, index) =>\n            mess.includes('joined') ? (\n              <li\n                key={index}\n                className=\"shadow-lg p-3 mb-2 text-center bg-white text-success rounded text-break\"\n              >\n                <div className=\"badge badge-primary text-wrap\">{mess}</div>\n              </li>\n            ) : (\n              <li\n                key={index}\n                className=\"row justify-content-between shadow-lg p-3 mb-2 bg-white  rounded text-break\"\n              >\n                <div>\n                  <Avatar className=\"bg-primary mr-3\">{mess[0]}</Avatar>\n                  <h5>{mess}</h5>\n                </div>\n                <div className=\"badge text-wrap \">{this.state.time}</div>\n              </li>\n            )\n          )}\n          chatSubmit={this.handleChatSubmit}\n          valueChat={this.state.messageContent}\n          chatChange={this.handleMessage}\n        />\n      </div>\n    );\n  };\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}