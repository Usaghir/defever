{"ast":null,"code":"var _jsxFileName = \"/Users/umerraja/All Cloud Drives /Google Drive/Study/Study Data/Programming/Repositories/Projects/defever/src/main/frontend/src/components/comments/CommentList.js\";\nimport React, { Component } from \"react\";\nimport CommentsApi from \"./../../api/CommentsApi\";\nimport CommentCard from \"./CommentCard\";\nimport CommentForm from \"./CommentForm\";\nimport UserApi from \"../../api/UserApi\";\n\nclass CommentList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {},\n      comments: []\n    };\n  }\n\n  async createComment(commentData) {\n    if (commentData !== undefined) {\n      try {\n        const post = this.props.post;\n        const user = this.state.user;\n        const response = await CommentsApi.createComment({\n          body: commentData.body,\n          date: new Date().toLocaleString(),\n          likes: [],\n          post,\n          user\n        });\n        const comment = response.data;\n        const newComments = this.state.comments.concat(comment);\n        this.setState({\n          comments: newComments\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }\n\n  async updateComment(newCommentData) {\n    try {\n      const post = this.props.post;\n      await CommentsApi.updateComment({\n        id: newCommentData.id,\n        body: newCommentData.body,\n        date: newCommentData.date,\n        likes: newCommentData.likes,\n        post,\n        user: newCommentData.user\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async deleteComment(comment) {\n    try {\n      await CommentsApi.deleteComment(comment.id);\n      const newComments = this.state.comments.filter(c => c.id !== comment.id);\n      this.setState({\n        comments: newComments\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  componentDidMount() {\n    const postId = this.props.post.id;\n    CommentsApi.getAllCommentsByPostId(postId).then(({\n      data\n    }) => {\n      this.setState({\n        comments: data\n      });\n    }).catch(err => console.error(err.response.data));\n    UserApi.current().then(({\n      data\n    }) => this.setState({\n      user: data\n    })).catch(err => console.error(err));\n  }\n\n  render() {\n    const comments = this.state.comments.sort((comment1, comment2) => comment1.likes <= comment2.likes ? 1 : -1);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CommentForm, {\n      onSubmit: commentData => this.createComment(commentData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }), comments.map(comment => /*#__PURE__*/React.createElement(CommentCard, {\n      key: comment.id,\n      currentUser: this.state.user,\n      comment: comment,\n      onLikeClick: newCommentData => this.updateComment(newCommentData),\n      onDeleteClick: () => this.deleteComment(comment),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default CommentList;","map":{"version":3,"sources":["/Users/umerraja/All Cloud Drives /Google Drive/Study/Study Data/Programming/Repositories/Projects/defever/src/main/frontend/src/components/comments/CommentList.js"],"names":["React","Component","CommentsApi","CommentCard","CommentForm","UserApi","CommentList","constructor","props","state","user","comments","createComment","commentData","undefined","post","response","body","date","Date","toLocaleString","likes","comment","data","newComments","concat","setState","e","console","error","updateComment","newCommentData","id","deleteComment","filter","c","componentDidMount","postId","getAllCommentsByPostId","then","catch","err","current","render","sort","comment1","comment2","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport CommentsApi from \"./../../api/CommentsApi\";\nimport CommentCard from \"./CommentCard\";\nimport CommentForm from \"./CommentForm\";\nimport UserApi from \"../../api/UserApi\";\n\nclass CommentList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {},\n      comments: [],\n    };\n  }\n\n  async createComment(commentData) {\n    if(commentData !== undefined) {\n      try {\n        const post = this.props.post;\n        const user = this.state.user;\n        const response = await CommentsApi.createComment({\n          body: commentData.body, date: new Date().toLocaleString(),\n          likes: [], post, user,\n        });\n        const comment = response.data;\n        const newComments = this.state.comments.concat(comment);\n  \n        this.setState({\n          comments: newComments,\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }\n\n  async updateComment(newCommentData) {\n    try {\n      const post = this.props.post;\n      await CommentsApi.updateComment({\n        id: newCommentData.id, body: newCommentData.body, date: newCommentData.date,\n        likes: newCommentData.likes, post, user: newCommentData.user\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async deleteComment(comment) {\n    try {\n      await CommentsApi.deleteComment(comment.id);\n      const newComments = this.state.comments.filter(\n        (c) => c.id !== comment.id\n      );\n      this.setState({\n        comments: newComments,\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  componentDidMount() {\n    const postId = this.props.post.id;\n    CommentsApi.getAllCommentsByPostId(postId)\n      .then(({ data }) => {\n        this.setState({ comments: data });\n      })\n      .catch((err) => console.error(err.response.data));\n    UserApi.current()\n      .then(({ data }) => this.setState({ user: data }))\n      .catch((err) => console.error(err));\n  }\n\n  render() {\n    const comments = this.state.comments.sort((comment1, comment2) =>\n                      (comment1.likes <= comment2.likes) ? 1 : -1);\n    return (\n      <div>\n        <CommentForm\n          onSubmit={(commentData) => this.createComment(commentData)}\n        />\n        {comments.map((comment) => (\n          <CommentCard\n            key={comment.id}\n            currentUser={this.state.user}\n            comment={comment}\n            onLikeClick={(newCommentData) => this.updateComment(newCommentData)}\n            onDeleteClick={() => this.deleteComment(comment)}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CommentList;\n"]},"metadata":{},"sourceType":"module"}