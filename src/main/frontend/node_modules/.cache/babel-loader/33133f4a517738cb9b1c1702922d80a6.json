{"ast":null,"code":"import AuthApi from \"../api/AuthApi\";\nconst tokenKey = \"_token\"; // Disclaimer: This simple auth implementation is for development purposes only.\n\nclass Auth {\n  constructor() {\n    this.setLoggedIn = () => {};\n  }\n\n  isLoggedIn() {\n    return this._getToken() != null;\n  }\n\n  async login(loginData) {\n    return await this._loginOrRegister(AuthApi.authenticate, loginData);\n  }\n\n  async register(registrationData) {\n    return await this._loginOrRegister(AuthApi.register, registrationData);\n  }\n\n  logout() {\n    this.setLoggedIn(false);\n\n    this._clearToken();\n  }\n\n  bindLoggedInStateSetter(loggedInStateSetter) {\n    this.setLoggedIn = loggedInStateSetter;\n  }\n\n  getAuthorizationHeader() {\n    return \"Bearer \" + this._getToken();\n  }\n\n  async _loginOrRegister(action, data) {\n    try {\n      const response = await action(data);\n\n      this._setToken(response.data.token);\n\n      this.setLoggedIn(true);\n      return true;\n    } catch (e) {\n      console.error(e);\n      this.setLoggedIn(false);\n      return false;\n    }\n  }\n\n  _getToken() {\n    return window.sessionStorage.getItem(tokenKey);\n  }\n\n  _setToken(token) {\n    window.sessionStorage.setItem(tokenKey, token);\n  }\n\n  _clearToken() {\n    window.sessionStorage.removeItem(tokenKey);\n  }\n\n}\n\nexport default new Auth();","map":{"version":3,"sources":["/Users/umerraja/All Cloud Drives /Google Drive/Study/Study Data/Programming/Repositories/Projects/defever-client/src/services/Auth.js"],"names":["AuthApi","tokenKey","Auth","setLoggedIn","isLoggedIn","_getToken","login","loginData","_loginOrRegister","authenticate","register","registrationData","logout","_clearToken","bindLoggedInStateSetter","loggedInStateSetter","getAuthorizationHeader","action","data","response","_setToken","token","e","console","error","window","sessionStorage","getItem","setItem","removeItem"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB;AAEA,MAAMC,QAAQ,GAAG,QAAjB,C,CAEA;;AAEA,MAAMC,IAAN,CAAW;AAAA;AAAA,SACPC,WADO,GACO,MAAM,CAAE,CADf;AAAA;;AAGPC,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKC,SAAL,MAAoB,IAA3B;AACH;;AAED,QAAMC,KAAN,CAAYC,SAAZ,EAAuB;AACnB,WAAO,MAAM,KAAKC,gBAAL,CAAsBR,OAAO,CAACS,YAA9B,EAA4CF,SAA5C,CAAb;AACH;;AAED,QAAMG,QAAN,CAAeC,gBAAf,EAAiC;AAC7B,WAAO,MAAM,KAAKH,gBAAL,CAAsBR,OAAO,CAACU,QAA9B,EAAwCC,gBAAxC,CAAb;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,SAAKT,WAAL,CAAiB,KAAjB;;AACA,SAAKU,WAAL;AACH;;AAEDC,EAAAA,uBAAuB,CAACC,mBAAD,EAAsB;AACzC,SAAKZ,WAAL,GAAmBY,mBAAnB;AACH;;AAEDC,EAAAA,sBAAsB,GAAG;AACrB,WAAO,YAAU,KAAKX,SAAL,EAAjB;AACH;;AAED,QAAMG,gBAAN,CAAuBS,MAAvB,EAA+BC,IAA/B,EAAqC;AACjC,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,IAAD,CAA7B;;AACA,WAAKE,SAAL,CAAeD,QAAQ,CAACD,IAAT,CAAcG,KAA7B;;AACA,WAAKlB,WAAL,CAAiB,IAAjB;AACA,aAAO,IAAP;AACH,KALD,CAKE,OAAOmB,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AAEA,WAAKnB,WAAL,CAAiB,KAAjB;AACA,aAAO,KAAP;AACH;AACJ;;AAEDE,EAAAA,SAAS,GAAG;AACR,WAAOoB,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B1B,QAA9B,CAAP;AACH;;AAEDmB,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACbI,IAAAA,MAAM,CAACC,cAAP,CAAsBE,OAAtB,CAA8B3B,QAA9B,EAAwCoB,KAAxC;AACH;;AAEDR,EAAAA,WAAW,GAAG;AACVY,IAAAA,MAAM,CAACC,cAAP,CAAsBG,UAAtB,CAAiC5B,QAAjC;AACH;;AApDM;;AAwDX,eAAe,IAAIC,IAAJ,EAAf","sourcesContent":["import AuthApi from \"../api/AuthApi\";\n\nconst tokenKey = \"_token\";\n\n// Disclaimer: This simple auth implementation is for development purposes only.\n\nclass Auth {\n    setLoggedIn = () => {};\n\n    isLoggedIn() {\n        return this._getToken() != null;\n    }\n\n    async login(loginData) {\n        return await this._loginOrRegister(AuthApi.authenticate, loginData);\n    }\n\n    async register(registrationData) {\n        return await this._loginOrRegister(AuthApi.register, registrationData);\n    }\n\n    logout() {\n        this.setLoggedIn(false);\n        this._clearToken();\n    }\n\n    bindLoggedInStateSetter(loggedInStateSetter) {\n        this.setLoggedIn = loggedInStateSetter;\n    }\n\n    getAuthorizationHeader() {\n        return \"Bearer \"+this._getToken();\n    }\n\n    async _loginOrRegister(action, data) {\n        try {\n            const response = await action(data);\n            this._setToken(response.data.token);\n            this.setLoggedIn(true);\n            return true;\n        } catch (e) {\n            console.error(e);\n            \n            this.setLoggedIn(false);\n            return false;\n        }\n    }\n\n    _getToken() {\n        return window.sessionStorage.getItem(tokenKey);\n    }\n\n    _setToken(token) {\n        window.sessionStorage.setItem(tokenKey, token);\n    }\n\n    _clearToken() {\n        window.sessionStorage.removeItem(tokenKey);\n    }\n}\n\n\nexport default new Auth();"]},"metadata":{},"sourceType":"module"}